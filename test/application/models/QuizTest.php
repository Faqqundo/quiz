<?php

namespace Model;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-12-14 at 22:24:37.
 */
class QuizTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Quiz
     */
    protected $object;

    /**
     * Rekord z bazy do badań
     *
     * @var \Row\Quiz
     */
    protected $quiz;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Quiz;

        $this->quiz = \Table\Quiz::getInstance()->find(1)->current();
        if (!$this->quiz) {
            throw new \Exception('Błąd danych testowych');
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Model\Quiz::policzPunkty
     * @dataProvider policzPunktyProvider
     *
     * @param int $iloscPunktow ilość punktów która powinna wyjść z obliczeń
     * @param array $odpowiedzi odpowiedzi do zsumowania
     */
    public function testPoliczPunkty($iloscPunktow, array $odpowiedzi) {
        $this->assertEquals($iloscPunktow, $this->object->policzPunkty($this->quiz, $odpowiedzi));
    }

    public function policzPunktyProvider()
    {
        // pierwsza wartość to oczekiwana liczba punktów
        // druga tablica w linii to pary idPytania => idOdpowiedzi

        return array(
            array(1, array(1 => 1)),
            array(0, array(1 => 2)),
            array(0, array(1 => 3)),
            array(0, array(2 => 4)),
            array(1, array(2 => 5)),
            array(0, array(2 => 6)),

            array(0, array(1 => 2, 2 => 4)),
            array(0, array(1 => 3, 2 => 6)),
            array(2, array(1 => 1, 2 => 5)),

            //duplikacja odpowiedzi na pytanie
            array(1, array(2 => 4, 2 => 5)),
            array(1, array(2 => 5, 2 => 5)),//wybranie dwa razy tej samej dobrej odpowiedzi na pytanie
            array(0, array(2 => 5, 2 => 4))
        );
    }

    /**
     * Sprawdzanie sytuacji wyjątkowej - odpowiedź z innego pytania
     *
     * @covers Model\Quiz::policzPunkty
     * @expectedException \Exception
     * @expectedExceptionMessageRegExp /odpowiedź nie należy do pytania/
     */
    public function testPoliczPunktyWyjatkiA() {
        $this->object->policzPunkty($this->quiz, array(2 => 1));
    }

    /**
     * Sprawdzanie sytuacji wyjątkowej - odpowiedź z innego quizu
     *
     * @covers Model\Quiz::policzPunkty
     * @expectedException \Exception
     * @expectedExceptionMessageRegExp /pytanie nie należy do rozwiązywanego quizu/
     */
    public function testPoliczPunktyWyjatkiB() {
        $this->object->policzPunkty($this->quiz, array(4 => 10));
    }

    /**
     * Sprawdzanie sytuacji wyjątkowej - brak takiego pytania
     *
     * @covers Model\Quiz::policzPunkty
     * @expectedException \Exception
     * @expectedExceptionMessageRegExp /błędnie przekazane id/
     */
    public function testPoliczPunktyWyjatkiC() {
        $this->object->policzPunkty($this->quiz, array(100 => 1));
    }

    /**
     * Sprawdzanie sytuacji wyjątkowej - brak takiej odpowiedzi
     *
     * @covers Model\Quiz::policzPunkty
     * @expectedException \Exception
     * @expectedExceptionMessageRegExp /błędnie przekazane id/
     */
    public function testPoliczPunktyWyjatkiD() {
        $this->object->policzPunkty($this->quiz, array(1 => 100));
    }

    /**
     * @covers Model\Quiz::przydzielWynik
     */
    public function testPrzydzielWynik() {
        $this->assertEquals(1, ($this->object->przydzielWynik($this->quiz, 0)->id));
        $this->assertEquals(2, $this->object->przydzielWynik($this->quiz, 1)->id);
        $this->assertEquals(2, $this->object->przydzielWynik($this->quiz, 2)->id);
        $this->assertEquals(3, $this->object->przydzielWynik($this->quiz, 3)->id);
        $this->assertEquals(3, $this->object->przydzielWynik($this->quiz, 4)->id);
        $this->assertEquals(3, $this->object->przydzielWynik($this->quiz, 400)->id);

        $byloException = false;
        try {
            $this->object->przydzielWynik($this->quiz, -1);
        } catch (\Exception $exc) {
            $byloException = true;
        }

        $this->assertTrue($byloException);
    }

    /**
     * @covers Model\Quiz::getInstance
     */
    public function testGetInstance() {
        $quiz = Quiz::getInstance();

        $this->assertInstanceOf(Quiz::class, $this->object);
        $this->assertInstanceOf(Quiz::class, $quiz);

        $this->assertSame($quiz, Quiz::getInstance());
        $this->assertNotSame($quiz, $this->object);
    }

}
